# -*- coding: utf-8 -*-
"""btdetect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z_0VnPIonqVimUPwO7zSCbqLhzLM5Rny
"""

!unzip '/content/archive.zip'

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)


import os
for dirname, _,filenames in os.walk(r'/archive.zip'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import keras
from keras.models import Sequential
from keras.layers import Conv2D,Flatten,Dense,MaxPooling2D,Dropout
from sklearn.metrics import accuracy_score

import ipywidgets as widgets
import io
from PIL import Image
import tqdm
from sklearn.model_selection import train_test_split
import cv2
from sklearn.utils import shuffle
import tensorflow as tf

"""FOLDER PATHS"""

X_train = []
Y_train = []
image_size = 150
labels = ['glioma_tumor','meningioma_tumor','no_tumor','pituitary_tumor']
for i in labels:
    folderPath = os.path.join(r'/content/Training',i)
    for j in os.listdir(folderPath):
        img = cv2.imread(os.path.join(folderPath,j))   #joins images in folder
        img = cv2.resize(img,(image_size,image_size))  #scale image to required size(150*150)
        X_train.append(img)                            #puts images
        Y_train.append(i)                              #puts type of tumor image

for i in labels:
    folderPath = os.path.join(r'/content/Testing',i)
    for j in os.listdir(folderPath):
        img = cv2.imread(os.path.join(folderPath,j))
        img = cv2.resize(img,(image_size,image_size))
        X_train.append(img)
        Y_train.append(i)

X_train = np.array(X_train)              #converts array in numpy array
Y_train = np.array(Y_train)

X_train,Y_train = shuffle(X_train,Y_train,random_state=101)    #splits whole data
X_train.shape                                                  #o/p (no. of train img,size,rgb channel)

"""TRAIN TEST SPLIT"""

X_train,X_test,y_train,y_test = train_test_split(X_train,Y_train,test_size=0.1,random_state=101)

y_train_new = []
for i in y_train:
    y_train_new.append(labels.index(i))
y_train=y_train_new
y_train = tf.keras.utils.to_categorical(y_train)

y_test_new = []
for i in y_test:
    y_test_new.append(labels.index(i))
y_test=y_test_new
y_test = tf.keras.utils.to_categorical(y_test)

"""CONVOLUTIONAL NEURAL NETWORK"""

model = Sequential()
model.add(Conv2D(32,(3,3),activation = 'relu',input_shape=(150,150,3)))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(Dropout(0.3))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(Conv2D(256,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.3))
model.add(Flatten())
model.add(Dense(512,activation = 'relu'))
model.add(Dense(512,activation = 'relu'))
model.add(Dropout(0.3))
model.add(Dense(4,activation='softmax'))

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='Adam',metrics=['accuracy'])

history = model.fit(X_train,y_train,epochs=20,validation_split=0.1)

"""DATA VISUALISE"""

from sklearn.metrics import classification_report, confusion_matrix

pred = model.predict(X_test)
pred = np.argmax(pred,axis=1)
y_test_new = np.argmax(y_test,axis=1)

print (classification_report(y_test_new,pred))

import matplotlib.pyplot as plt
import seaborn as sns

#model.save('braintumor.h5')

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(len(acc))
fig = plt.figure(figsize=(14,7))
plt.plot(epochs,acc,'r',label="Training Accuracy")
plt.plot(epochs,val_acc,'b',label="Validation Accuracy")
plt.legend(loc='upper left')
plt.show()

loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(loss))
fig = plt.figure(figsize=(14,7))
plt.plot(epochs,loss,'r',label="Training loss")
plt.plot(epochs,val_loss,'b',label="Validation loss")
plt.legend(loc='upper left')
plt.show()

"""Prediction"""

img = cv2.imread(r'/content/Testing/no_tumor/image(101).jpg')
img = cv2.resize(img,(150,150))
img_array = np.array(img)
img_array.shape

img_array = img_array.reshape(1,150,150,3)
img_array.shape

from tensorflow.keras.preprocessing import image
img = image.load_img(r'/content/Testing/no_tumor/image(1).jpg')
plt.imshow(img,interpolation='nearest')
plt.show()


a=model.predict(img_array)
indices = a.argmax()
print(indices)
if indices==0:
    print("Brain tumor is detected. It is Glioma Tumor.")
if indices==1:
    print("Brain tumor is detected. It is Meninglioma Tumor.")
if indices==2:
    print("There is absence of Tumor in brain.")
if indices==3:
    print("Brain tumor is detected. It is Pituitary Tumor.")

colors_dark= ["#1F1F1F","#313131","#636363","#AEAEAE","#DADADA"]
colors_red = ["#331313","#582626","#9E1717","#D35151","#E9B4B4"]

fig,ax=plt.subplots(1,1,figsize=(14,7))
sns.heatmap(confusion_matrix(y_test_new,pred), ax=ax,xticklabels=labels,yticklabels=labels,annot=True,cmap=colors_red[::-1],alpha=0.7,linewidths=2,linecolor= colors_dark[3])
fig.text(s="heatmap of the confusion matrix", size=18, fontweight="bold", fontname="monospace", color=colors_dark[1], y=0.92, x=0.28, alpha=0.8)
plt.show()